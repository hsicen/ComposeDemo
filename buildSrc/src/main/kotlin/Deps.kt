import org.gradle.api.artifacts.dsl.DependencyHandler/** * 作者：hsicen  7/27/21 23:08 * 邮箱：codinghuang@163.com * 作用： * 描述：依赖库管理 */object Version {    const val compose = "1.1.0-alpha01"    const val gradle = "7.0.0"    const val kotlin = "1.5.21"    const val compileSdk = 31    const val minSdk = 21    const val targetSdk = 31    const val versionCode = 1    const val versionName = "1.0.0"}object Deps {    private const val kotlinStd = "org.jetbrains.kotlin:kotlin-stdlib:${Version.kotlin}"    private const val coreKtx = "androidx.core:core-ktx:1.5.0"    private const val appcompat = "androidx.appcompat:appcompat:1.3.0"    private const val material = "com.google.android.material:material:1.3.0"    private const val constraintCompose = "androidx.constraintlayout:constraintlayout-compose:1.0.0-beta01"    private const val activityCompose = "androidx.activity:activity-compose:1.3.0-rc02"    private const val coilCompose = "io.coil-kt:coil-compose:1.3.1"    private const val composeUi = "androidx.compose.ui:ui:${Version.compose}"    private const val composeMaterial = "androidx.compose.material:material:${Version.compose}"    private const val composeIcon = "androidx.compose.material:material-icons-extended:${Version.compose}"    private const val composeAnimation = "androidx.compose.animation:animation:${Version.compose}"    private const val composeFoundation = "androidx.compose.foundation:foundation:${Version.compose}"    private const val composeFoundationLayout = "androidx.compose.foundation:foundation-layout:${Version.compose}"    private const val composeRuntime = "androidx.compose.runtime:runtime:${Version.compose}"    private const val composeRuntimeLiveData = "androidx.compose.runtime:runtime-livedata:${Version.compose}"    private const val junit = "junit:junit:4.13.2"    private const val junitExt = "androidx.test.ext:junit:1.1.2"    private const val espressoCore = "androidx.test.espresso:espresso-core:3.3.0"    private const val uiTest = "androidx.compose.ui:ui-test-junit4:${Version.compose}"    private const val composeUiTool = "androidx.compose.ui:ui-tooling:${Version.compose}"    private const val composeUiToolPreview = "androidx.compose.ui:ui-tooling-preview:${Version.compose}"    private const val lifecycleRuntime = "androidx.lifecycle:lifecycle-runtime-ktx:2.3.1"    private const val lifecycleLiveData = "androidx.lifecycle:lifecycle-livedata:2.4.0-alpha03"    private const val lifecycleViewModelCompose = "androidx.lifecycle:lifecycle-viewmodel-compose:1.0.0-alpha07"    // java testLib lib    val testLib = arrayListOf<String>().apply {        add(junit)    }    // android testLib lib    val androidTestLib = arrayListOf<String>().apply {        add(junitExt)        add(espressoCore)        add(uiTest)    }    // debug lib    val debugLib = arrayListOf<String>().apply {        add(composeUiTool)        add(composeUiToolPreview)    }    // app lib    val appLib = arrayListOf<String>().apply {        add(coreKtx)        add(appcompat)        add(material)        add(kotlinStd)        add(activityCompose)        add(constraintCompose)        add(coilCompose)    }    // compose lib    val composeLib = arrayListOf<String>().apply {        add(composeUi)        add(composeMaterial)        add(composeIcon)        add(composeAnimation)        add(composeFoundation)        add(composeFoundationLayout)        add(composeRuntime)        add(composeRuntimeLiveData)    }    // lifecycle lib    val lifecycleLib = arrayListOf<String>().apply {        add(lifecycleRuntime)        add(lifecycleLiveData)        add(lifecycleViewModelCompose)    }}fun DependencyHandler.kapt(list: List<String>) {    list.forEach { dependency ->        add("kapt", dependency)    }}fun DependencyHandler.implementation(list: List<String>) {    list.forEach { dependency ->        add("implementation", dependency)    }}fun DependencyHandler.androidTestImplementation(list: List<String>) {    list.forEach { dependency ->        add("androidTestImplementation", dependency)    }}fun DependencyHandler.testImplementation(list: List<String>) {    list.forEach { dependency ->        add("testImplementation", dependency)    }}fun DependencyHandler.debugImplementation(list: List<String>) {    list.forEach { dependency ->        add("debugImplementation", dependency)    }}